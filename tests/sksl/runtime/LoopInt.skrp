    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             kZero = 0
    4. copy_constant                  kTen = 0x0000000A (1.401298e-44)
    5. copy_slot_unmasked             $0 = pos(0)
    6. copy_constant                  $1 = colorGreen(1)
    7. max_float                      $0 = max($0, $1)
    8. copy_constant                  $1 = colorGreen(3)
    9. min_float                      $0 = min($0, $1)
   10. cast_to_int_from_float         $0 = FloatToInt($0)
   11. copy_constant                  $1 = 0x00000005 (7.006492e-45)
   12. mul_int                        $0 *= $1
   13. copy_slot_unmasked             five = $0
   14. store_condition_mask           $20 = CondMask
   15. store_condition_mask           $40 = CondMask
   16. store_condition_mask           $50 = CondMask
   17. store_condition_mask           $30 = CondMask
   18. store_condition_mask           $76 = CondMask
   19. store_condition_mask           $60 = CondMask
   20. store_condition_mask           $14 = CondMask
   21. store_condition_mask           $70 = CondMask
   22. store_condition_mask           $8 = CondMask
   23. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (#57)
   24. store_return_mask              $9 = RetMask
   25. copy_slot_unmasked             $10 = five
   26. copy_slot_unmasked             five = $10
   27. copy_slot_unmasked             $10 = kZero
   28. copy_slot_unmasked             i = $10
   29. store_loop_mask                $10 = LoopMask
   30. jump                           jump +16 (#46)
   31. zero_slot_unmasked             [for-loop continue mask 0] = 0
   32. store_condition_mask           $11 = CondMask
   33. copy_slot_unmasked             $12 = i
   34. copy_slot_unmasked             $13 = five
   35. cmpeq_int                      $12 = equal($12, $13)
   36. merge_condition_mask           CondMask = $11 & $12
   37. copy_slot_unmasked             $13 = i
   38. copy_slot_masked               [return_loop].result = Mask($13)
   39. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   40. load_condition_mask            CondMask = $11
   41. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   42. copy_slot_unmasked             $11 = i
   43. copy_constant                  $12 = 0x00000001 (1.401298e-45)
   44. add_int                        $11 += $12
   45. copy_slot_masked               i = Mask($11)
   46. copy_slot_unmasked             $11 = i
   47. copy_constant                  $12 = 0x0000000A (1.401298e-44)
   48. cmplt_int                      $11 = lessThan($11, $12)
   49. merge_loop_mask                LoopMask &= $11
   50. stack_rewind
   51. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#31)
   52. load_loop_mask                 LoopMask = $10
   53. zero_slot_unmasked             $10 = 0
   54. copy_slot_masked               [return_loop].result = Mask($10)
   55. load_return_mask               RetMask = $9
   56. copy_slot_unmasked             $9 = [return_loop].result
   57. copy_constant                  $10 = 0x00000005 (7.006492e-45)
   58. cmpeq_int                      $9 = equal($9, $10)
   59. zero_slot_unmasked             $71 = 0
   60. merge_condition_mask           CondMask = $8 & $9
   61. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#98)
   62. copy_slot_unmasked             $72 = five
   63. copy_slot_unmasked             five = $72
   64. zero_slot_unmasked             sum = 0
   65. zero_slot_unmasked             i = 0
   66. store_loop_mask                $72 = LoopMask
   67. jump                           jump +19 (#86)
   68. zero_slot_unmasked             [for-loop continue mask 1] = 0
   69. store_condition_mask           $73 = CondMask
   70. copy_slot_unmasked             $74 = i
   71. copy_slot_unmasked             $75 = five
   72. cmplt_int                      $74 = lessThan($74, $75)
   73. merge_condition_mask           CondMask = $73 & $74
   74. copy_constant                  $75 = 0xFFFFFFFF
   75. copy_slot_masked               [for-loop continue mask 1] = Mask($75)
   76. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   77. load_condition_mask            CondMask = $73
   78. copy_2_slots_unmasked          $73..74 = sum(0..1)
   79. add_int                        $73 += $74
   80. copy_slot_masked               sum = Mask($73)
   81. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   82. copy_slot_unmasked             $73 = i
   83. copy_constant                  $74 = 0x00000001 (1.401298e-45)
   84. add_int                        $73 += $74
   85. copy_slot_masked               i = Mask($73)
   86. copy_slot_unmasked             $73 = i
   87. copy_slot_unmasked             $74 = kTen
   88. cmplt_int                      $73 = lessThan($73, $74)
   89. merge_loop_mask                LoopMask &= $73
   90. stack_rewind
   91. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#68)
   92. load_loop_mask                 LoopMask = $72
   93. copy_slot_unmasked             $72 = sum
   94. copy_slot_masked               [continue_loop].result = Mask($72)
   95. copy_constant                  $73 = 0x00000023 (4.904545e-44)
   96. cmpeq_int                      $72 = equal($72, $73)
   97. copy_slot_masked               $71 = Mask($72)
   98. load_condition_mask            CondMask = $8
   99. zero_slot_unmasked             $15 = 0
  100. merge_condition_mask           CondMask = $70 & $71
  101. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#137)
  102. copy_constant                  five = 0x00000005 (7.006492e-45)
  103. zero_slot_unmasked             sum = 0
  104. copy_constant                  kOne = 0x00000001 (1.401298e-45)
  105. zero_slot_unmasked             i = 0
  106. store_loop_mask                $16 = LoopMask
  107. jump                           jump +18 (#125)
  108. zero_slot_unmasked             [for-loop continue mask 2] = 0
  109. store_condition_mask           $17 = CondMask
  110. copy_slot_unmasked             $18 = five
  111. copy_slot_unmasked             $19 = i
  112. cmplt_int                      $18 = lessThan($18, $19)
  113. merge_condition_mask           CondMask = $17 & $18
  114. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  115. load_condition_mask            CondMask = $17
  116. copy_slot_unmasked             $17 = sum
  117. copy_slot_unmasked             $18 = i
  118. add_int                        $17 += $18
  119. copy_slot_masked               sum = Mask($17)
  120. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  121. copy_slot_unmasked             $17 = i
  122. copy_slot_unmasked             $18 = kOne
  123. add_int                        $17 += $18
  124. copy_slot_masked               i = Mask($17)
  125. copy_slot_unmasked             $17 = i
  126. copy_constant                  $18 = 0x0000000A (1.401298e-44)
  127. cmplt_int                      $17 = lessThan($17, $18)
  128. merge_loop_mask                LoopMask &= $17
  129. stack_rewind
  130. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#108)
  131. load_loop_mask                 LoopMask = $16
  132. copy_slot_unmasked             $16 = sum
  133. copy_slot_masked               [break_loop].result = Mask($16)
  134. copy_constant                  $17 = 0x0000000F (2.101948e-44)
  135. cmpeq_int                      $16 = equal($16, $17)
  136. copy_slot_masked               $15 = Mask($16)
  137. load_condition_mask            CondMask = $70
  138. zero_slot_unmasked             $61 = 0
  139. merge_condition_mask           CondMask = $14 & $15
  140. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#172)
  141. copy_constant                  $62 = 0x00000009 (1.261169e-44)
  142. swizzle_4                      $62..65 = ($62..65).xxxx
  143. copy_4_slots_unmasked          result = $62..65
  144. copy_constant                  i = 0x00000001 (1.401298e-45)
  145. store_loop_mask                $62 = LoopMask
  146. jump                           jump +9 (#155)
  147. zero_slot_unmasked             [for-loop continue mask 3] = 0
  148. copy_4_slots_unmasked          $63..66 = result
  149. copy_4_slots_masked            result = Mask($63..66)
  150. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  151. copy_slot_unmasked             $63 = i
  152. copy_constant                  $64 = 0x00000001 (1.401298e-45)
  153. add_int                        $63 += $64
  154. copy_slot_masked               i = Mask($63)
  155. copy_slot_unmasked             $63 = i
  156. copy_constant                  $64 = 0x00000003 (4.203895e-45)
  157. cmple_int                      $63 = lessThanEqual($63, $64)
  158. merge_loop_mask                LoopMask &= $63
  159. stack_rewind
  160. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#147)
  161. load_loop_mask                 LoopMask = $62
  162. copy_4_slots_unmasked          $62..65 = result
  163. copy_constant                  $66 = 0x00000009 (1.261169e-44)
  164. copy_constant                  $67 = 0x00000001 (1.401298e-45)
  165. copy_constant                  $68 = 0x00000002 (2.802597e-45)
  166. copy_constant                  $69 = 0x00000003 (4.203895e-45)
  167. cmpeq_4_ints                   $62..65 = equal($62..65, $66..69)
  168. bitwise_and_2_ints             $62..63 &= $64..65
  169. bitwise_and_int                $62 &= $63
  170. copy_slot_masked               [loop_operator_le].result = Mask($62)
  171. copy_slot_masked               $61 = Mask($62)
  172. load_condition_mask            CondMask = $14
  173. zero_slot_unmasked             $77 = 0
  174. merge_condition_mask           CondMask = $60 & $61
  175. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#207)
  176. copy_constant                  $78 = 0x00000009 (1.261169e-44)
  177. swizzle_4                      $78..81 = ($78..81).xxxx
  178. copy_4_slots_unmasked          result = $78..81
  179. copy_constant                  i = 0x00000001 (1.401298e-45)
  180. store_loop_mask                $78 = LoopMask
  181. jump                           jump +9 (#190)
  182. zero_slot_unmasked             [for-loop continue mask 4] = 0
  183. copy_4_slots_unmasked          $79..82 = result
  184. copy_4_slots_masked            result = Mask($79..82)
  185. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  186. copy_slot_unmasked             $79 = i
  187. copy_constant                  $80 = 0x00000001 (1.401298e-45)
  188. add_int                        $79 += $80
  189. copy_slot_masked               i = Mask($79)
  190. copy_slot_unmasked             $79 = i
  191. copy_constant                  $80 = 0x00000004 (5.605194e-45)
  192. cmplt_int                      $79 = lessThan($79, $80)
  193. merge_loop_mask                LoopMask &= $79
  194. stack_rewind
  195. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#182)
  196. load_loop_mask                 LoopMask = $78
  197. copy_4_slots_unmasked          $78..81 = result
  198. copy_constant                  $82 = 0x00000009 (1.261169e-44)
  199. copy_constant                  $83 = 0x00000001 (1.401298e-45)
  200. copy_constant                  $84 = 0x00000002 (2.802597e-45)
  201. copy_constant                  $85 = 0x00000003 (4.203895e-45)
  202. cmpeq_4_ints                   $78..81 = equal($78..81, $82..85)
  203. bitwise_and_2_ints             $78..79 &= $80..81
  204. bitwise_and_int                $78 &= $79
  205. copy_slot_masked               [loop_operator_lt].result = Mask($78)
  206. copy_slot_masked               $77 = Mask($78)
  207. load_condition_mask            CondMask = $60
  208. zero_slot_unmasked             $31 = 0
  209. merge_condition_mask           CondMask = $76 & $77
  210. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#242)
  211. copy_constant                  $32 = 0x00000009 (1.261169e-44)
  212. swizzle_4                      $32..35 = ($32..35).xxxx
  213. copy_4_slots_unmasked          result = $32..35
  214. copy_constant                  i = 0x00000003 (4.203895e-45)
  215. store_loop_mask                $32 = LoopMask
  216. jump                           jump +9 (#225)
  217. zero_slot_unmasked             [for-loop continue mask 5] = 0
  218. copy_4_slots_unmasked          $33..36 = result
  219. copy_4_slots_masked            result = Mask($33..36)
  220. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  221. copy_slot_unmasked             $33 = i
  222. copy_constant                  $34 = 0x00000001 (1.401298e-45)
  223. sub_int                        $33 -= $34
  224. copy_slot_masked               i = Mask($33)
  225. copy_constant                  $33 = 0x00000001 (1.401298e-45)
  226. copy_slot_unmasked             $34 = i
  227. cmple_int                      $33 = lessThanEqual($33, $34)
  228. merge_loop_mask                LoopMask &= $33
  229. stack_rewind
  230. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#217)
  231. load_loop_mask                 LoopMask = $32
  232. copy_4_slots_unmasked          $32..35 = result
  233. copy_constant                  $36 = 0x00000009 (1.261169e-44)
  234. copy_constant                  $37 = 0x00000003 (4.203895e-45)
  235. copy_constant                  $38 = 0x00000002 (2.802597e-45)
  236. copy_constant                  $39 = 0x00000001 (1.401298e-45)
  237. cmpeq_4_ints                   $32..35 = equal($32..35, $36..39)
  238. bitwise_and_2_ints             $32..33 &= $34..35
  239. bitwise_and_int                $32 &= $33
  240. copy_slot_masked               [loop_operator_ge].result = Mask($32)
  241. copy_slot_masked               $31 = Mask($32)
  242. load_condition_mask            CondMask = $76
  243. zero_slot_unmasked             $51 = 0
  244. merge_condition_mask           CondMask = $30 & $31
  245. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#277)
  246. copy_constant                  $52 = 0x00000009 (1.261169e-44)
  247. swizzle_4                      $52..55 = ($52..55).xxxx
  248. copy_4_slots_unmasked          result = $52..55
  249. copy_constant                  i = 0x00000003 (4.203895e-45)
  250. store_loop_mask                $52 = LoopMask
  251. jump                           jump +9 (#260)
  252. zero_slot_unmasked             [for-loop continue mask 6] = 0
  253. copy_4_slots_unmasked          $53..56 = result
  254. copy_4_slots_masked            result = Mask($53..56)
  255. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  256. copy_slot_unmasked             $53 = i
  257. copy_constant                  $54 = 0x00000001 (1.401298e-45)
  258. sub_int                        $53 -= $54
  259. copy_slot_masked               i = Mask($53)
  260. zero_slot_unmasked             $53 = 0
  261. copy_slot_unmasked             $54 = i
  262. cmplt_int                      $53 = lessThan($53, $54)
  263. merge_loop_mask                LoopMask &= $53
  264. stack_rewind
  265. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#252)
  266. load_loop_mask                 LoopMask = $52
  267. copy_4_slots_unmasked          $52..55 = result
  268. copy_constant                  $56 = 0x00000009 (1.261169e-44)
  269. copy_constant                  $57 = 0x00000003 (4.203895e-45)
  270. copy_constant                  $58 = 0x00000002 (2.802597e-45)
  271. copy_constant                  $59 = 0x00000001 (1.401298e-45)
  272. cmpeq_4_ints                   $52..55 = equal($52..55, $56..59)
  273. bitwise_and_2_ints             $52..53 &= $54..55
  274. bitwise_and_int                $52 &= $53
  275. copy_slot_masked               [loop_operator_gt].result = Mask($52)
  276. copy_slot_masked               $51 = Mask($52)
  277. load_condition_mask            CondMask = $30
  278. zero_slot_unmasked             $41 = 0
  279. merge_condition_mask           CondMask = $50 & $51
  280. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#312)
  281. copy_constant                  $42 = 0x00000009 (1.261169e-44)
  282. swizzle_4                      $42..45 = ($42..45).xxxx
  283. copy_4_slots_unmasked          result = $42..45
  284. copy_constant                  i = 0x00000001 (1.401298e-45)
  285. store_loop_mask                $42 = LoopMask
  286. jump                           jump +9 (#295)
  287. zero_slot_unmasked             [for-loop continue mask 7] = 0
  288. copy_4_slots_unmasked          $43..46 = result
  289. copy_4_slots_masked            result = Mask($43..46)
  290. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  291. copy_slot_unmasked             $43 = i
  292. copy_constant                  $44 = 0x00000001 (1.401298e-45)
  293. add_int                        $43 += $44
  294. copy_slot_masked               i = Mask($43)
  295. copy_slot_unmasked             $43 = i
  296. copy_constant                  $44 = 0x00000001 (1.401298e-45)
  297. cmpeq_int                      $43 = equal($43, $44)
  298. merge_loop_mask                LoopMask &= $43
  299. stack_rewind
  300. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#287)
  301. load_loop_mask                 LoopMask = $42
  302. copy_4_slots_unmasked          $42..45 = result
  303. copy_constant                  $46 = 0x00000009 (1.261169e-44)
  304. copy_constant                  $47 = 0x00000009 (1.261169e-44)
  305. copy_constant                  $48 = 0x00000009 (1.261169e-44)
  306. copy_constant                  $49 = 0x00000001 (1.401298e-45)
  307. cmpeq_4_ints                   $42..45 = equal($42..45, $46..49)
  308. bitwise_and_2_ints             $42..43 &= $44..45
  309. bitwise_and_int                $42 &= $43
  310. copy_slot_masked               [loop_operator_eq].result = Mask($42)
  311. copy_slot_masked               $41 = Mask($42)
  312. load_condition_mask            CondMask = $50
  313. zero_slot_unmasked             $21 = 0
  314. merge_condition_mask           CondMask = $40 & $41
  315. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (#347)
  316. copy_constant                  $22 = 0x00000009 (1.261169e-44)
  317. swizzle_4                      $22..25 = ($22..25).xxxx
  318. copy_4_slots_unmasked          result = $22..25
  319. copy_constant                  i = 0x00000001 (1.401298e-45)
  320. store_loop_mask                $22 = LoopMask
  321. jump                           jump +9 (#330)
  322. zero_slot_unmasked             [for-loop continue mask 8] = 0
  323. copy_4_slots_unmasked          $23..26 = result
  324. copy_4_slots_masked            result = Mask($23..26)
  325. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  326. copy_slot_unmasked             $23 = i
  327. copy_constant                  $24 = 0x00000001 (1.401298e-45)
  328. add_int                        $23 += $24
  329. copy_slot_masked               i = Mask($23)
  330. copy_slot_unmasked             $23 = i
  331. copy_constant                  $24 = 0x00000004 (5.605194e-45)
  332. cmpne_int                      $23 = notEqual($23, $24)
  333. merge_loop_mask                LoopMask &= $23
  334. stack_rewind
  335. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#322)
  336. load_loop_mask                 LoopMask = $22
  337. copy_4_slots_unmasked          $22..25 = result
  338. copy_constant                  $26 = 0x00000009 (1.261169e-44)
  339. copy_constant                  $27 = 0x00000001 (1.401298e-45)
  340. copy_constant                  $28 = 0x00000002 (2.802597e-45)
  341. copy_constant                  $29 = 0x00000003 (4.203895e-45)
  342. cmpeq_4_ints                   $22..25 = equal($22..25, $26..29)
  343. bitwise_and_2_ints             $22..23 &= $24..25
  344. bitwise_and_int                $22 &= $23
  345. copy_slot_masked               [loop_operator_ne].result = Mask($22)
  346. copy_slot_masked               $21 = Mask($22)
  347. load_condition_mask            CondMask = $40
  348. copy_4_constants               $0..3 = colorRed
  349. merge_condition_mask           CondMask = $20 & $21
  350. copy_4_constants               $4..7 = colorGreen
  351. copy_4_slots_masked            $0..3 = Mask($4..7)
  352. load_condition_mask            CondMask = $20
  353. copy_4_slots_masked            [main].result = Mask($0..3)
  354. load_src                       src.rgba = [main].result
