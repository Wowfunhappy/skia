    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $13 = CondMask
    4. store_condition_mask           $24 = CondMask
    5. store_condition_mask           $44 = CondMask
    6. store_condition_mask           $60 = CondMask
    7. store_condition_mask           $73 = CondMask
    8. branch_if_no_lanes_active      branch_if_no_lanes_active +57 (label 6 at #65)
    9. store_return_mask              $74 = RetMask
   10. splat_4_constants              v, vv = 0
   11. copy_2_uniforms                $75..76 = testInputs(0..1)
   12. copy_2_slots_masked            v = Mask($75..76)
   13. copy_2_uniforms                $75..76 = testInputs(0..1)
   14. copy_2_slots_masked            v = Mask($75..76)
   15. store_condition_mask           $75 = CondMask
   16. copy_2_slots_unmasked          $76..77 = v
   17. copy_2_uniforms                $78..79 = testInputs(0..1)
   18. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   19. bitwise_or_int                 $76 |= $77
   20. merge_condition_mask           CondMask = $75 & $76
   21. copy_constant                  $77 = 0
   22. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   23. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   24. load_condition_mask            CondMask = $75
   25. store_condition_mask           $75 = CondMask
   26. copy_2_slots_unmasked          $76..77 = v
   27. copy_2_uniforms                $78..79 = testInputs(0..1)
   28. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   29. bitwise_or_int                 $76 |= $77
   30. merge_condition_mask           CondMask = $75 & $76
   31. copy_constant                  $77 = 0
   32. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   33. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   34. load_condition_mask            CondMask = $75
   35. splat_2_constants              $75..76 = 0
   36. copy_2_uniforms                $77..78 = testInputs(0..1)
   37. sub_2_floats                   $75..76 -= $77..78
   38. copy_2_slots_masked            v = Mask($75..76)
   39. splat_2_constants              $75..76 = 0
   40. copy_2_uniforms                $77..78 = testInputs(0..1)
   41. sub_2_floats                   $75..76 -= $77..78
   42. copy_2_slots_masked            v = Mask($75..76)
   43. store_condition_mask           $75 = CondMask
   44. copy_2_slots_unmasked          $76..77 = v
   45. splat_2_constants              $78..79 = 0
   46. copy_2_uniforms                $80..81 = testInputs(0..1)
   47. sub_2_floats                   $78..79 -= $80..81
   48. cmpne_2_floats                 $76..77 = notEqual($76..77, $78..79)
   49. bitwise_or_int                 $76 |= $77
   50. merge_condition_mask           CondMask = $75 & $76
   51. copy_constant                  $77 = 0
   52. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($77)
   53. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   54. load_condition_mask            CondMask = $75
   55. splat_2_constants              $75..76 = 0
   56. copy_2_slots_masked            vv = Mask($75..76)
   57. splat_2_constants              $75..76 = 0
   58. copy_2_slots_masked            vv = Mask($75..76)
   59. splat_2_constants              $77..78 = 0
   60. cmpeq_2_floats                 $75..76 = equal($75..76, $77..78)
   61. bitwise_and_int                $75 &= $76
   62. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($75)
   63. load_return_mask               RetMask = $74
   64. copy_slot_unmasked             $74 = [test_no_op_mat2_X_vec2].result
   65. label                          label 0x00000006
   66. copy_constant                  $61 = 0
   67. merge_condition_mask           CondMask = $73 & $74
   68. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 5 at #132)
   69. store_return_mask              $62 = RetMask
   70. splat_4_constants              v₁, vv₁(0) = 0
   71. splat_2_constants              vv₁(1..2) = 0
   72. copy_3_uniforms                $63..65 = testInputs(0..2)
   73. copy_3_slots_masked            v₁ = Mask($63..65)
   74. copy_3_uniforms                $63..65 = testInputs(0..2)
   75. copy_3_slots_masked            v₁ = Mask($63..65)
   76. store_condition_mask           $63 = CondMask
   77. copy_3_slots_unmasked          $64..66 = v₁
   78. copy_3_uniforms                $67..69 = testInputs(0..2)
   79. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
   80. bitwise_or_int                 $65 |= $66
   81. bitwise_or_int                 $64 |= $65
   82. merge_condition_mask           CondMask = $63 & $64
   83. copy_constant                  $65 = 0
   84. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
   85. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   86. load_condition_mask            CondMask = $63
   87. store_condition_mask           $63 = CondMask
   88. copy_3_slots_unmasked          $64..66 = v₁
   89. copy_3_uniforms                $67..69 = testInputs(0..2)
   90. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
   91. bitwise_or_int                 $65 |= $66
   92. bitwise_or_int                 $64 |= $65
   93. merge_condition_mask           CondMask = $63 & $64
   94. copy_constant                  $65 = 0
   95. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. load_condition_mask            CondMask = $63
   98. splat_3_constants              $63..65 = 0
   99. copy_3_uniforms                $66..68 = testInputs(0..2)
  100. sub_3_floats                   $63..65 -= $66..68
  101. copy_3_slots_masked            v₁ = Mask($63..65)
  102. splat_3_constants              $63..65 = 0
  103. copy_3_uniforms                $66..68 = testInputs(0..2)
  104. sub_3_floats                   $63..65 -= $66..68
  105. copy_3_slots_masked            v₁ = Mask($63..65)
  106. store_condition_mask           $63 = CondMask
  107. copy_3_slots_unmasked          $64..66 = v₁
  108. splat_3_constants              $67..69 = 0
  109. copy_3_uniforms                $70..72 = testInputs(0..2)
  110. sub_3_floats                   $67..69 -= $70..72
  111. cmpne_3_floats                 $64..66 = notEqual($64..66, $67..69)
  112. bitwise_or_int                 $65 |= $66
  113. bitwise_or_int                 $64 |= $65
  114. merge_condition_mask           CondMask = $63 & $64
  115. copy_constant                  $65 = 0
  116. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($65)
  117. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  118. load_condition_mask            CondMask = $63
  119. splat_3_constants              $63..65 = 0
  120. copy_3_slots_masked            vv₁ = Mask($63..65)
  121. splat_3_constants              $63..65 = 0
  122. copy_3_slots_masked            vv₁ = Mask($63..65)
  123. splat_3_constants              $66..68 = 0
  124. cmpeq_3_floats                 $63..65 = equal($63..65, $66..68)
  125. bitwise_and_int                $64 &= $65
  126. bitwise_and_int                $63 &= $64
  127. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($63)
  128. load_return_mask               RetMask = $62
  129. copy_slot_unmasked             $62 = [test_no_op_mat3_X_vec3].result
  130. label                          label 0x00000007
  131. copy_slot_masked               $61 = Mask($62)
  132. label                          label 0x00000005
  133. load_condition_mask            CondMask = $73
  134. copy_constant                  $45 = 0
  135. merge_condition_mask           CondMask = $60 & $61
  136. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 4 at #200)
  137. store_return_mask              $46 = RetMask
  138. splat_4_constants              v₂ = 0
  139. splat_4_constants              vv₂ = 0
  140. copy_4_uniforms                $47..50 = testInputs
  141. copy_4_slots_masked            v₂ = Mask($47..50)
  142. copy_4_uniforms                $47..50 = testInputs
  143. copy_4_slots_masked            v₂ = Mask($47..50)
  144. store_condition_mask           $47 = CondMask
  145. copy_4_slots_unmasked          $48..51 = v₂
  146. copy_4_uniforms                $52..55 = testInputs
  147. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  148. bitwise_or_2_ints              $48..49 |= $50..51
  149. bitwise_or_int                 $48 |= $49
  150. merge_condition_mask           CondMask = $47 & $48
  151. copy_constant                  $49 = 0
  152. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  153. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  154. load_condition_mask            CondMask = $47
  155. store_condition_mask           $47 = CondMask
  156. copy_4_slots_unmasked          $48..51 = v₂
  157. copy_4_uniforms                $52..55 = testInputs
  158. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  159. bitwise_or_2_ints              $48..49 |= $50..51
  160. bitwise_or_int                 $48 |= $49
  161. merge_condition_mask           CondMask = $47 & $48
  162. copy_constant                  $49 = 0
  163. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  164. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  165. load_condition_mask            CondMask = $47
  166. splat_4_constants              $47..50 = 0
  167. copy_4_uniforms                $51..54 = testInputs
  168. sub_4_floats                   $47..50 -= $51..54
  169. copy_4_slots_masked            v₂ = Mask($47..50)
  170. splat_4_constants              $47..50 = 0
  171. copy_4_uniforms                $51..54 = testInputs
  172. sub_4_floats                   $47..50 -= $51..54
  173. copy_4_slots_masked            v₂ = Mask($47..50)
  174. store_condition_mask           $47 = CondMask
  175. copy_4_slots_unmasked          $48..51 = v₂
  176. splat_4_constants              $52..55 = 0
  177. copy_4_uniforms                $56..59 = testInputs
  178. sub_4_floats                   $52..55 -= $56..59
  179. cmpne_4_floats                 $48..51 = notEqual($48..51, $52..55)
  180. bitwise_or_2_ints              $48..49 |= $50..51
  181. bitwise_or_int                 $48 |= $49
  182. merge_condition_mask           CondMask = $47 & $48
  183. copy_constant                  $49 = 0
  184. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($49)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_condition_mask            CondMask = $47
  187. splat_4_constants              $47..50 = 0
  188. copy_4_slots_masked            vv₂ = Mask($47..50)
  189. splat_4_constants              $47..50 = 0
  190. copy_4_slots_masked            vv₂ = Mask($47..50)
  191. splat_4_constants              $51..54 = 0
  192. cmpeq_4_floats                 $47..50 = equal($47..50, $51..54)
  193. bitwise_and_2_ints             $47..48 &= $49..50
  194. bitwise_and_int                $47 &= $48
  195. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($47)
  196. load_return_mask               RetMask = $46
  197. copy_slot_unmasked             $46 = [test_no_op_mat4_X_vec4].result
  198. label                          label 0x00000008
  199. copy_slot_masked               $45 = Mask($46)
  200. label                          label 0x00000004
  201. load_condition_mask            CondMask = $60
  202. copy_constant                  $25 = 0
  203. merge_condition_mask           CondMask = $44 & $45
  204. branch_if_no_lanes_active      branch_if_no_lanes_active +96 (label 3 at #300)
  205. store_return_mask              $26 = RetMask
  206. splat_2_constants              n = 0xBF800000 (-1.0)
  207. splat_2_constants              i = 0x3F800000 (1.0)
  208. splat_4_constants              z, v₃ = 0
  209. splat_2_constants              vv₃ = 0
  210. splat_2_constants              $27..28 = 0
  211. copy_2_slots_masked            vv₃ = Mask($27..28)
  212. splat_2_constants              $27..28 = 0
  213. copy_2_slots_masked            vv₃ = Mask($27..28)
  214. store_condition_mask           $27 = CondMask
  215. copy_2_slots_unmasked          $28..29 = vv₃
  216. copy_2_slots_unmasked          $30..31 = z
  217. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  218. bitwise_or_int                 $28 |= $29
  219. merge_condition_mask           CondMask = $27 & $28
  220. copy_constant                  $29 = 0
  221. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  222. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  223. load_condition_mask            CondMask = $27
  224. copy_2_slots_unmasked          $60..61 = i
  225. copy_4_uniforms                $62..65 = testMatrix2x2
  226. copy_4_slots_unmasked          $27..30 = $60..63
  227. dot_2_floats                   $27 = dot($27..28, $29..30)
  228. copy_2_slots_unmasked          $28..29 = $60..61
  229. copy_2_slots_unmasked          $30..31 = $64..65
  230. dot_2_floats                   $28 = dot($28..29, $30..31)
  231. copy_2_slots_masked            v₃ = Mask($27..28)
  232. store_condition_mask           $27 = CondMask
  233. copy_2_slots_unmasked          $28..29 = v₃
  234. copy_constant                  $30 = 0x40400000 (3.0)
  235. copy_constant                  $31 = 0x40E00000 (7.0)
  236. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  237. bitwise_or_int                 $28 |= $29
  238. merge_condition_mask           CondMask = $27 & $28
  239. copy_constant                  $29 = 0
  240. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  241. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  242. load_condition_mask            CondMask = $27
  243. copy_4_uniforms                $60..63 = testMatrix2x2
  244. swizzle_3                      $61..63 = ($61..63).yxz
  245. copy_2_slots_unmasked          $64..65 = i
  246. copy_2_slots_unmasked          $27..28 = $60..61
  247. copy_2_slots_unmasked          $29..30 = $64..65
  248. dot_2_floats                   $27 = dot($27..28, $29..30)
  249. copy_4_slots_unmasked          $28..31 = $62..65
  250. dot_2_floats                   $28 = dot($28..29, $30..31)
  251. copy_2_slots_masked            v₃ = Mask($27..28)
  252. store_condition_mask           $27 = CondMask
  253. copy_2_slots_unmasked          $28..29 = v₃
  254. copy_constant                  $30 = 0x40800000 (4.0)
  255. copy_constant                  $31 = 0x40C00000 (6.0)
  256. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  257. bitwise_or_int                 $28 |= $29
  258. merge_condition_mask           CondMask = $27 & $28
  259. copy_constant                  $29 = 0
  260. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  261. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  262. load_condition_mask            CondMask = $27
  263. copy_2_slots_unmasked          $60..61 = n
  264. copy_4_uniforms                $62..65 = testMatrix2x2
  265. copy_4_slots_unmasked          $27..30 = $60..63
  266. dot_2_floats                   $27 = dot($27..28, $29..30)
  267. copy_2_slots_unmasked          $28..29 = $60..61
  268. copy_2_slots_unmasked          $30..31 = $64..65
  269. dot_2_floats                   $28 = dot($28..29, $30..31)
  270. copy_2_slots_masked            v₃ = Mask($27..28)
  271. store_condition_mask           $27 = CondMask
  272. copy_2_slots_unmasked          $28..29 = v₃
  273. copy_constant                  $30 = 0xC0400000 (-3.0)
  274. copy_constant                  $31 = 0xC0E00000 (-7.0)
  275. cmpne_2_floats                 $28..29 = notEqual($28..29, $30..31)
  276. bitwise_or_int                 $28 |= $29
  277. merge_condition_mask           CondMask = $27 & $28
  278. copy_constant                  $29 = 0
  279. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($29)
  280. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  281. load_condition_mask            CondMask = $27
  282. copy_4_uniforms                $60..63 = testMatrix2x2
  283. swizzle_3                      $61..63 = ($61..63).yxz
  284. copy_2_slots_unmasked          $64..65 = n
  285. copy_2_slots_unmasked          $27..28 = $60..61
  286. copy_2_slots_unmasked          $29..30 = $64..65
  287. dot_2_floats                   $27 = dot($27..28, $29..30)
  288. copy_4_slots_unmasked          $28..31 = $62..65
  289. dot_2_floats                   $28 = dot($28..29, $30..31)
  290. copy_2_slots_masked            v₃ = Mask($27..28)
  291. copy_constant                  $29 = 0xC0800000 (-4.0)
  292. copy_constant                  $30 = 0xC0C00000 (-6.0)
  293. cmpeq_2_floats                 $27..28 = equal($27..28, $29..30)
  294. bitwise_and_int                $27 &= $28
  295. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($27)
  296. load_return_mask               RetMask = $26
  297. copy_slot_unmasked             $26 = [test_no_op_vec2_X_mat2].result
  298. label                          label 0x00000009
  299. copy_slot_masked               $25 = Mask($26)
  300. label                          label 0x00000003
  301. load_condition_mask            CondMask = $44
  302. copy_constant                  $14 = 0
  303. merge_condition_mask           CondMask = $24 & $25
  304. branch_if_no_lanes_active      branch_if_no_lanes_active +130 (label 2 at #434)
  305. store_return_mask              $15 = RetMask
  306. splat_3_constants              n₁ = 0xBF800000 (-1.0)
  307. splat_3_constants              i₁ = 0x3F800000 (1.0)
  308. splat_4_constants              z₁, v₄(0) = 0
  309. splat_4_constants              v₄(1..2), vv₄(0..1) = 0
  310. copy_constant                  vv₄(2) = 0
  311. splat_3_constants              $16..18 = 0
  312. copy_3_slots_masked            vv₄ = Mask($16..18)
  313. splat_3_constants              $16..18 = 0
  314. copy_3_slots_masked            vv₄ = Mask($16..18)
  315. store_condition_mask           $16 = CondMask
  316. copy_3_slots_unmasked          $17..19 = vv₄
  317. copy_3_slots_unmasked          $20..22 = z₁
  318. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  319. bitwise_or_int                 $18 |= $19
  320. bitwise_or_int                 $17 |= $18
  321. merge_condition_mask           CondMask = $16 & $17
  322. copy_constant                  $18 = 0
  323. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  324. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  325. load_condition_mask            CondMask = $16
  326. copy_3_slots_unmasked          $44..46 = i₁
  327. copy_4_uniforms                $47..50 = testMatrix3x3(0..3)
  328. copy_4_uniforms                $51..54 = testMatrix3x3(4..7)
  329. copy_uniform                   $55 = testMatrix3x3(8)
  330. copy_4_slots_unmasked          $16..19 = $44..47
  331. copy_2_slots_unmasked          $20..21 = $48..49
  332. dot_3_floats                   $16 = dot($16..18, $19..21)
  333. copy_3_slots_unmasked          $17..19 = $44..46
  334. copy_3_slots_unmasked          $20..22 = $50..52
  335. dot_3_floats                   $17 = dot($17..19, $20..22)
  336. copy_3_slots_unmasked          $18..20 = $44..46
  337. copy_3_slots_unmasked          $21..23 = $53..55
  338. dot_3_floats                   $18 = dot($18..20, $21..23)
  339. copy_3_slots_masked            v₄ = Mask($16..18)
  340. store_condition_mask           $16 = CondMask
  341. copy_3_slots_unmasked          $17..19 = v₄
  342. copy_constant                  $20 = 0x40C00000 (6.0)
  343. copy_constant                  $21 = 0x41700000 (15.0)
  344. copy_constant                  $22 = 0x41C00000 (24.0)
  345. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  346. bitwise_or_int                 $18 |= $19
  347. bitwise_or_int                 $17 |= $18
  348. merge_condition_mask           CondMask = $16 & $17
  349. copy_constant                  $18 = 0
  350. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  351. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  352. load_condition_mask            CondMask = $16
  353. copy_4_uniforms                $44..47 = testMatrix3x3(0..3)
  354. copy_4_uniforms                $48..51 = testMatrix3x3(4..7)
  355. copy_uniform                   $52 = testMatrix3x3(8)
  356. shuffle                        $45..52 = ($45..52)[2 5 0 3 6 1 4 7]
  357. copy_3_slots_unmasked          $53..55 = i₁
  358. copy_3_slots_unmasked          $16..18 = $44..46
  359. copy_3_slots_unmasked          $19..21 = $53..55
  360. dot_3_floats                   $16 = dot($16..18, $19..21)
  361. copy_3_slots_unmasked          $17..19 = $47..49
  362. copy_3_slots_unmasked          $20..22 = $53..55
  363. dot_3_floats                   $17 = dot($17..19, $20..22)
  364. copy_4_slots_unmasked          $18..21 = $50..53
  365. copy_2_slots_unmasked          $22..23 = $54..55
  366. dot_3_floats                   $18 = dot($18..20, $21..23)
  367. copy_3_slots_masked            v₄ = Mask($16..18)
  368. store_condition_mask           $16 = CondMask
  369. copy_3_slots_unmasked          $17..19 = v₄
  370. copy_constant                  $20 = 0x41400000 (12.0)
  371. copy_constant                  $21 = 0x41700000 (15.0)
  372. copy_constant                  $22 = 0x41900000 (18.0)
  373. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  374. bitwise_or_int                 $18 |= $19
  375. bitwise_or_int                 $17 |= $18
  376. merge_condition_mask           CondMask = $16 & $17
  377. copy_constant                  $18 = 0
  378. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  379. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  380. load_condition_mask            CondMask = $16
  381. copy_3_slots_unmasked          $44..46 = n₁
  382. copy_4_uniforms                $47..50 = testMatrix3x3(0..3)
  383. copy_4_uniforms                $51..54 = testMatrix3x3(4..7)
  384. copy_uniform                   $55 = testMatrix3x3(8)
  385. copy_4_slots_unmasked          $16..19 = $44..47
  386. copy_2_slots_unmasked          $20..21 = $48..49
  387. dot_3_floats                   $16 = dot($16..18, $19..21)
  388. copy_3_slots_unmasked          $17..19 = $44..46
  389. copy_3_slots_unmasked          $20..22 = $50..52
  390. dot_3_floats                   $17 = dot($17..19, $20..22)
  391. copy_3_slots_unmasked          $18..20 = $44..46
  392. copy_3_slots_unmasked          $21..23 = $53..55
  393. dot_3_floats                   $18 = dot($18..20, $21..23)
  394. copy_3_slots_masked            v₄ = Mask($16..18)
  395. store_condition_mask           $16 = CondMask
  396. copy_3_slots_unmasked          $17..19 = v₄
  397. copy_constant                  $20 = 0xC0C00000 (-6.0)
  398. copy_constant                  $21 = 0xC1700000 (-15.0)
  399. copy_constant                  $22 = 0xC1C00000 (-24.0)
  400. cmpne_3_floats                 $17..19 = notEqual($17..19, $20..22)
  401. bitwise_or_int                 $18 |= $19
  402. bitwise_or_int                 $17 |= $18
  403. merge_condition_mask           CondMask = $16 & $17
  404. copy_constant                  $18 = 0
  405. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($18)
  406. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  407. load_condition_mask            CondMask = $16
  408. copy_4_uniforms                $44..47 = testMatrix3x3(0..3)
  409. copy_4_uniforms                $48..51 = testMatrix3x3(4..7)
  410. copy_uniform                   $52 = testMatrix3x3(8)
  411. shuffle                        $45..52 = ($45..52)[2 5 0 3 6 1 4 7]
  412. copy_3_slots_unmasked          $53..55 = n₁
  413. copy_3_slots_unmasked          $16..18 = $44..46
  414. copy_3_slots_unmasked          $19..21 = $53..55
  415. dot_3_floats                   $16 = dot($16..18, $19..21)
  416. copy_3_slots_unmasked          $17..19 = $47..49
  417. copy_3_slots_unmasked          $20..22 = $53..55
  418. dot_3_floats                   $17 = dot($17..19, $20..22)
  419. copy_4_slots_unmasked          $18..21 = $50..53
  420. copy_2_slots_unmasked          $22..23 = $54..55
  421. dot_3_floats                   $18 = dot($18..20, $21..23)
  422. copy_3_slots_masked            v₄ = Mask($16..18)
  423. copy_constant                  $19 = 0xC1400000 (-12.0)
  424. copy_constant                  $20 = 0xC1700000 (-15.0)
  425. copy_constant                  $21 = 0xC1900000 (-18.0)
  426. cmpeq_3_floats                 $16..18 = equal($16..18, $19..21)
  427. bitwise_and_int                $17 &= $18
  428. bitwise_and_int                $16 &= $17
  429. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($16)
  430. load_return_mask               RetMask = $15
  431. copy_slot_unmasked             $15 = [test_no_op_vec3_X_mat3].result
  432. label                          label 0x0000000A
  433. copy_slot_masked               $14 = Mask($15)
  434. label                          label 0x00000002
  435. load_condition_mask            CondMask = $24
  436. copy_constant                  $0 = 0
  437. merge_condition_mask           CondMask = $13 & $14
  438. branch_if_no_lanes_active      branch_if_no_lanes_active +149 (label 1 at #587)
  439. store_return_mask              $1 = RetMask
  440. splat_4_constants              n₂ = 0xBF800000 (-1.0)
  441. splat_4_constants              i₂ = 0x3F800000 (1.0)
  442. splat_4_constants              z₂ = 0
  443. copy_4_uniforms                testMatrix4x4(0..3) = testMatrix2x2
  444. copy_4_uniforms                testMatrix4x4(4..7) = testMatrix2x2
  445. copy_4_uniforms                testMatrix4x4(8..11) = testMatrix2x2
  446. copy_4_uniforms                testMatrix4x4(12..15) = testMatrix2x2
  447. splat_4_constants              v₅ = 0
  448. splat_4_constants              vv₅ = 0
  449. splat_4_constants              $2..5 = 0
  450. copy_4_slots_masked            vv₅ = Mask($2..5)
  451. splat_4_constants              $2..5 = 0
  452. copy_4_slots_masked            vv₅ = Mask($2..5)
  453. store_condition_mask           $2 = CondMask
  454. copy_4_slots_unmasked          $3..6 = vv₅
  455. copy_4_slots_unmasked          $7..10 = z₂
  456. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  457. bitwise_or_2_ints              $3..4 |= $5..6
  458. bitwise_or_int                 $3 |= $4
  459. merge_condition_mask           CondMask = $2 & $3
  460. copy_constant                  $4 = 0
  461. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  462. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  463. load_condition_mask            CondMask = $2
  464. copy_4_slots_unmasked          $24..27 = i₂
  465. copy_4_slots_unmasked          $28..31 = testMatrix4x4(0..3)
  466. copy_4_slots_unmasked          $32..35 = testMatrix4x4(4..7)
  467. copy_4_slots_unmasked          $36..39 = testMatrix4x4(8..11)
  468. copy_4_slots_unmasked          $40..43 = testMatrix4x4(12..15)
  469. copy_4_slots_unmasked          $2..5 = $24..27
  470. copy_4_slots_unmasked          $6..9 = $28..31
  471. dot_4_floats                   $2 = dot($2..5, $6..9)
  472. copy_4_slots_unmasked          $3..6 = $24..27
  473. copy_4_slots_unmasked          $7..10 = $32..35
  474. dot_4_floats                   $3 = dot($3..6, $7..10)
  475. copy_4_slots_unmasked          $4..7 = $24..27
  476. copy_4_slots_unmasked          $8..11 = $36..39
  477. dot_4_floats                   $4 = dot($4..7, $8..11)
  478. copy_4_slots_unmasked          $5..8 = $24..27
  479. copy_4_slots_unmasked          $9..12 = $40..43
  480. dot_4_floats                   $5 = dot($5..8, $9..12)
  481. copy_4_slots_masked            v₅ = Mask($2..5)
  482. store_condition_mask           $2 = CondMask
  483. copy_4_slots_unmasked          $3..6 = v₅
  484. splat_4_constants              $7..10 = 0x41200000 (10.0)
  485. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  486. bitwise_or_2_ints              $3..4 |= $5..6
  487. bitwise_or_int                 $3 |= $4
  488. merge_condition_mask           CondMask = $2 & $3
  489. copy_constant                  $4 = 0
  490. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  491. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  492. load_condition_mask            CondMask = $2
  493. copy_4_slots_unmasked          $24..27 = testMatrix4x4(0..3)
  494. copy_4_slots_unmasked          $28..31 = testMatrix4x4(4..7)
  495. copy_4_slots_unmasked          $32..35 = testMatrix4x4(8..11)
  496. copy_4_slots_unmasked          $36..39 = testMatrix4x4(12..15)
  497. shuffle                        $25..39 = ($25..39)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  498. copy_4_slots_unmasked          $40..43 = i₂
  499. copy_4_slots_unmasked          $2..5 = $24..27
  500. copy_4_slots_unmasked          $6..9 = $40..43
  501. dot_4_floats                   $2 = dot($2..5, $6..9)
  502. stack_rewind
  503. copy_4_slots_unmasked          $3..6 = $28..31
  504. copy_4_slots_unmasked          $7..10 = $40..43
  505. dot_4_floats                   $3 = dot($3..6, $7..10)
  506. copy_4_slots_unmasked          $4..7 = $32..35
  507. copy_4_slots_unmasked          $8..11 = $40..43
  508. dot_4_floats                   $4 = dot($4..7, $8..11)
  509. copy_4_slots_unmasked          $5..8 = $36..39
  510. copy_4_slots_unmasked          $9..12 = $40..43
  511. dot_4_floats                   $5 = dot($5..8, $9..12)
  512. copy_4_slots_masked            v₅ = Mask($2..5)
  513. store_condition_mask           $2 = CondMask
  514. copy_4_slots_unmasked          $3..6 = v₅
  515. copy_constant                  $7 = 0x40800000 (4.0)
  516. copy_constant                  $8 = 0x41000000 (8.0)
  517. copy_constant                  $9 = 0x41400000 (12.0)
  518. copy_constant                  $10 = 0x41800000 (16.0)
  519. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  520. bitwise_or_2_ints              $3..4 |= $5..6
  521. bitwise_or_int                 $3 |= $4
  522. merge_condition_mask           CondMask = $2 & $3
  523. copy_constant                  $4 = 0
  524. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  525. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  526. load_condition_mask            CondMask = $2
  527. copy_4_slots_unmasked          $24..27 = n₂
  528. copy_4_slots_unmasked          $28..31 = testMatrix4x4(0..3)
  529. copy_4_slots_unmasked          $32..35 = testMatrix4x4(4..7)
  530. copy_4_slots_unmasked          $36..39 = testMatrix4x4(8..11)
  531. copy_4_slots_unmasked          $40..43 = testMatrix4x4(12..15)
  532. copy_4_slots_unmasked          $2..5 = $24..27
  533. copy_4_slots_unmasked          $6..9 = $28..31
  534. dot_4_floats                   $2 = dot($2..5, $6..9)
  535. copy_4_slots_unmasked          $3..6 = $24..27
  536. copy_4_slots_unmasked          $7..10 = $32..35
  537. dot_4_floats                   $3 = dot($3..6, $7..10)
  538. copy_4_slots_unmasked          $4..7 = $24..27
  539. copy_4_slots_unmasked          $8..11 = $36..39
  540. dot_4_floats                   $4 = dot($4..7, $8..11)
  541. copy_4_slots_unmasked          $5..8 = $24..27
  542. copy_4_slots_unmasked          $9..12 = $40..43
  543. dot_4_floats                   $5 = dot($5..8, $9..12)
  544. copy_4_slots_masked            v₅ = Mask($2..5)
  545. store_condition_mask           $2 = CondMask
  546. copy_4_slots_unmasked          $3..6 = v₅
  547. splat_4_constants              $7..10 = 0xC1200000 (-10.0)
  548. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  549. bitwise_or_2_ints              $3..4 |= $5..6
  550. bitwise_or_int                 $3 |= $4
  551. merge_condition_mask           CondMask = $2 & $3
  552. copy_constant                  $4 = 0
  553. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  554. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  555. load_condition_mask            CondMask = $2
  556. copy_4_slots_unmasked          $24..27 = testMatrix4x4(0..3)
  557. copy_4_slots_unmasked          $28..31 = testMatrix4x4(4..7)
  558. copy_4_slots_unmasked          $32..35 = testMatrix4x4(8..11)
  559. copy_4_slots_unmasked          $36..39 = testMatrix4x4(12..15)
  560. shuffle                        $25..39 = ($25..39)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  561. copy_4_slots_unmasked          $40..43 = n₂
  562. copy_4_slots_unmasked          $2..5 = $24..27
  563. copy_4_slots_unmasked          $6..9 = $40..43
  564. dot_4_floats                   $2 = dot($2..5, $6..9)
  565. copy_4_slots_unmasked          $3..6 = $28..31
  566. copy_4_slots_unmasked          $7..10 = $40..43
  567. dot_4_floats                   $3 = dot($3..6, $7..10)
  568. copy_4_slots_unmasked          $4..7 = $32..35
  569. copy_4_slots_unmasked          $8..11 = $40..43
  570. dot_4_floats                   $4 = dot($4..7, $8..11)
  571. copy_4_slots_unmasked          $5..8 = $36..39
  572. copy_4_slots_unmasked          $9..12 = $40..43
  573. dot_4_floats                   $5 = dot($5..8, $9..12)
  574. copy_4_slots_masked            v₅ = Mask($2..5)
  575. copy_constant                  $6 = 0xC0800000 (-4.0)
  576. copy_constant                  $7 = 0xC1000000 (-8.0)
  577. copy_constant                  $8 = 0xC1400000 (-12.0)
  578. copy_constant                  $9 = 0xC1800000 (-16.0)
  579. cmpeq_4_floats                 $2..5 = equal($2..5, $6..9)
  580. bitwise_and_2_ints             $2..3 &= $4..5
  581. bitwise_and_int                $2 &= $3
  582. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($2)
  583. load_return_mask               RetMask = $1
  584. copy_slot_unmasked             $1 = [test_no_op_vec4_X_mat4].result
  585. label                          label 0x0000000B
  586. copy_slot_masked               $0 = Mask($1)
  587. label                          label 0x00000001
  588. load_condition_mask            CondMask = $13
  589. swizzle_4                      $0..3 = ($0..3).xxxx
  590. copy_4_uniforms                $4..7 = colorRed
  591. copy_4_uniforms                $8..11 = colorGreen
  592. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  593. load_src                       src.rgba = $0..3
