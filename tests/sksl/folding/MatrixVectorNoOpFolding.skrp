    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $26 = CondMask
    4. store_condition_mask           $44 = CondMask
    5. store_condition_mask           $55 = CondMask
    6. store_condition_mask           $71 = CondMask
    7. store_condition_mask           $84 = CondMask
    8. branch_if_no_lanes_active      branch_if_no_lanes_active +57 (label 6 at #65)
    9. store_return_mask              $85 = RetMask
   10. splat_4_constants              v, vv = 0
   11. copy_2_uniforms                $86..87 = testInputs(0..1)
   12. copy_2_slots_masked            v = Mask($86..87)
   13. copy_2_uniforms                $86..87 = testInputs(0..1)
   14. copy_2_slots_masked            v = Mask($86..87)
   15. store_condition_mask           $86 = CondMask
   16. copy_2_slots_unmasked          $87..88 = v
   17. copy_2_uniforms                $89..90 = testInputs(0..1)
   18. cmpne_2_floats                 $87..88 = notEqual($87..88, $89..90)
   19. bitwise_or_int                 $87 |= $88
   20. merge_condition_mask           CondMask = $86 & $87
   21. copy_constant                  $88 = 0
   22. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($88)
   23. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   24. load_condition_mask            CondMask = $86
   25. store_condition_mask           $86 = CondMask
   26. copy_2_slots_unmasked          $87..88 = v
   27. copy_2_uniforms                $89..90 = testInputs(0..1)
   28. cmpne_2_floats                 $87..88 = notEqual($87..88, $89..90)
   29. bitwise_or_int                 $87 |= $88
   30. merge_condition_mask           CondMask = $86 & $87
   31. copy_constant                  $88 = 0
   32. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($88)
   33. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   34. load_condition_mask            CondMask = $86
   35. splat_2_constants              $86..87 = 0
   36. copy_2_uniforms                $88..89 = testInputs(0..1)
   37. sub_2_floats                   $86..87 -= $88..89
   38. copy_2_slots_masked            v = Mask($86..87)
   39. splat_2_constants              $86..87 = 0
   40. copy_2_uniforms                $88..89 = testInputs(0..1)
   41. sub_2_floats                   $86..87 -= $88..89
   42. copy_2_slots_masked            v = Mask($86..87)
   43. store_condition_mask           $86 = CondMask
   44. copy_2_slots_unmasked          $87..88 = v
   45. splat_2_constants              $89..90 = 0
   46. copy_2_uniforms                $91..92 = testInputs(0..1)
   47. sub_2_floats                   $89..90 -= $91..92
   48. cmpne_2_floats                 $87..88 = notEqual($87..88, $89..90)
   49. bitwise_or_int                 $87 |= $88
   50. merge_condition_mask           CondMask = $86 & $87
   51. copy_constant                  $88 = 0
   52. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($88)
   53. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   54. load_condition_mask            CondMask = $86
   55. splat_2_constants              $86..87 = 0
   56. copy_2_slots_masked            vv = Mask($86..87)
   57. splat_2_constants              $86..87 = 0
   58. copy_2_slots_masked            vv = Mask($86..87)
   59. splat_2_constants              $88..89 = 0
   60. cmpeq_2_floats                 $86..87 = equal($86..87, $88..89)
   61. bitwise_and_int                $86 &= $87
   62. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($86)
   63. load_return_mask               RetMask = $85
   64. copy_slot_unmasked             $85 = [test_no_op_mat2_X_vec2].result
   65. label                          label 0x00000006
   66. copy_constant                  $72 = 0
   67. merge_condition_mask           CondMask = $84 & $85
   68. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 5 at #132)
   69. store_return_mask              $73 = RetMask
   70. splat_4_constants              v₁, vv₁(0) = 0
   71. splat_2_constants              vv₁(1..2) = 0
   72. copy_3_uniforms                $74..76 = testInputs(0..2)
   73. copy_3_slots_masked            v₁ = Mask($74..76)
   74. copy_3_uniforms                $74..76 = testInputs(0..2)
   75. copy_3_slots_masked            v₁ = Mask($74..76)
   76. store_condition_mask           $74 = CondMask
   77. copy_3_slots_unmasked          $75..77 = v₁
   78. copy_3_uniforms                $78..80 = testInputs(0..2)
   79. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
   80. bitwise_or_int                 $76 |= $77
   81. bitwise_or_int                 $75 |= $76
   82. merge_condition_mask           CondMask = $74 & $75
   83. copy_constant                  $76 = 0
   84. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($76)
   85. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   86. load_condition_mask            CondMask = $74
   87. store_condition_mask           $74 = CondMask
   88. copy_3_slots_unmasked          $75..77 = v₁
   89. copy_3_uniforms                $78..80 = testInputs(0..2)
   90. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
   91. bitwise_or_int                 $76 |= $77
   92. bitwise_or_int                 $75 |= $76
   93. merge_condition_mask           CondMask = $74 & $75
   94. copy_constant                  $76 = 0
   95. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($76)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. load_condition_mask            CondMask = $74
   98. splat_3_constants              $74..76 = 0
   99. copy_3_uniforms                $77..79 = testInputs(0..2)
  100. sub_3_floats                   $74..76 -= $77..79
  101. copy_3_slots_masked            v₁ = Mask($74..76)
  102. splat_3_constants              $74..76 = 0
  103. copy_3_uniforms                $77..79 = testInputs(0..2)
  104. sub_3_floats                   $74..76 -= $77..79
  105. copy_3_slots_masked            v₁ = Mask($74..76)
  106. store_condition_mask           $74 = CondMask
  107. copy_3_slots_unmasked          $75..77 = v₁
  108. splat_3_constants              $78..80 = 0
  109. copy_3_uniforms                $81..83 = testInputs(0..2)
  110. sub_3_floats                   $78..80 -= $81..83
  111. cmpne_3_floats                 $75..77 = notEqual($75..77, $78..80)
  112. bitwise_or_int                 $76 |= $77
  113. bitwise_or_int                 $75 |= $76
  114. merge_condition_mask           CondMask = $74 & $75
  115. copy_constant                  $76 = 0
  116. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($76)
  117. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  118. load_condition_mask            CondMask = $74
  119. splat_3_constants              $74..76 = 0
  120. copy_3_slots_masked            vv₁ = Mask($74..76)
  121. splat_3_constants              $74..76 = 0
  122. copy_3_slots_masked            vv₁ = Mask($74..76)
  123. splat_3_constants              $77..79 = 0
  124. cmpeq_3_floats                 $74..76 = equal($74..76, $77..79)
  125. bitwise_and_int                $75 &= $76
  126. bitwise_and_int                $74 &= $75
  127. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($74)
  128. load_return_mask               RetMask = $73
  129. copy_slot_unmasked             $73 = [test_no_op_mat3_X_vec3].result
  130. label                          label 0x00000007
  131. copy_slot_masked               $72 = Mask($73)
  132. label                          label 0x00000005
  133. load_condition_mask            CondMask = $84
  134. copy_constant                  $56 = 0
  135. merge_condition_mask           CondMask = $71 & $72
  136. branch_if_no_lanes_active      branch_if_no_lanes_active +64 (label 4 at #200)
  137. store_return_mask              $57 = RetMask
  138. splat_4_constants              v₂ = 0
  139. splat_4_constants              vv₂ = 0
  140. copy_4_uniforms                $58..61 = testInputs
  141. copy_4_slots_masked            v₂ = Mask($58..61)
  142. copy_4_uniforms                $58..61 = testInputs
  143. copy_4_slots_masked            v₂ = Mask($58..61)
  144. store_condition_mask           $58 = CondMask
  145. copy_4_slots_unmasked          $59..62 = v₂
  146. copy_4_uniforms                $63..66 = testInputs
  147. cmpne_4_floats                 $59..62 = notEqual($59..62, $63..66)
  148. bitwise_or_2_ints              $59..60 |= $61..62
  149. bitwise_or_int                 $59 |= $60
  150. merge_condition_mask           CondMask = $58 & $59
  151. copy_constant                  $60 = 0
  152. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($60)
  153. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  154. load_condition_mask            CondMask = $58
  155. store_condition_mask           $58 = CondMask
  156. copy_4_slots_unmasked          $59..62 = v₂
  157. copy_4_uniforms                $63..66 = testInputs
  158. cmpne_4_floats                 $59..62 = notEqual($59..62, $63..66)
  159. bitwise_or_2_ints              $59..60 |= $61..62
  160. bitwise_or_int                 $59 |= $60
  161. merge_condition_mask           CondMask = $58 & $59
  162. copy_constant                  $60 = 0
  163. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($60)
  164. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  165. load_condition_mask            CondMask = $58
  166. splat_4_constants              $58..61 = 0
  167. copy_4_uniforms                $62..65 = testInputs
  168. sub_4_floats                   $58..61 -= $62..65
  169. copy_4_slots_masked            v₂ = Mask($58..61)
  170. splat_4_constants              $58..61 = 0
  171. copy_4_uniforms                $62..65 = testInputs
  172. sub_4_floats                   $58..61 -= $62..65
  173. copy_4_slots_masked            v₂ = Mask($58..61)
  174. store_condition_mask           $58 = CondMask
  175. copy_4_slots_unmasked          $59..62 = v₂
  176. splat_4_constants              $63..66 = 0
  177. copy_4_uniforms                $67..70 = testInputs
  178. sub_4_floats                   $63..66 -= $67..70
  179. cmpne_4_floats                 $59..62 = notEqual($59..62, $63..66)
  180. bitwise_or_2_ints              $59..60 |= $61..62
  181. bitwise_or_int                 $59 |= $60
  182. merge_condition_mask           CondMask = $58 & $59
  183. copy_constant                  $60 = 0
  184. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($60)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_condition_mask            CondMask = $58
  187. splat_4_constants              $58..61 = 0
  188. copy_4_slots_masked            vv₂ = Mask($58..61)
  189. splat_4_constants              $58..61 = 0
  190. copy_4_slots_masked            vv₂ = Mask($58..61)
  191. splat_4_constants              $62..65 = 0
  192. cmpeq_4_floats                 $58..61 = equal($58..61, $62..65)
  193. bitwise_and_2_ints             $58..59 &= $60..61
  194. bitwise_and_int                $58 &= $59
  195. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($58)
  196. load_return_mask               RetMask = $57
  197. copy_slot_unmasked             $57 = [test_no_op_mat4_X_vec4].result
  198. label                          label 0x00000008
  199. copy_slot_masked               $56 = Mask($57)
  200. label                          label 0x00000004
  201. load_condition_mask            CondMask = $71
  202. copy_constant                  $45 = 0
  203. merge_condition_mask           CondMask = $55 & $56
  204. branch_if_no_lanes_active      branch_if_no_lanes_active +78 (label 3 at #282)
  205. store_return_mask              $46 = RetMask
  206. splat_2_constants              n = 0xBF800000 (-1.0)
  207. splat_2_constants              i = 0x3F800000 (1.0)
  208. splat_4_constants              z, v₃ = 0
  209. splat_2_constants              vv₃ = 0
  210. splat_2_constants              $47..48 = 0
  211. copy_2_slots_masked            vv₃ = Mask($47..48)
  212. splat_2_constants              $47..48 = 0
  213. copy_2_slots_masked            vv₃ = Mask($47..48)
  214. store_condition_mask           $47 = CondMask
  215. copy_2_slots_unmasked          $48..49 = vv₃
  216. copy_2_slots_unmasked          $50..51 = z
  217. cmpne_2_floats                 $48..49 = notEqual($48..49, $50..51)
  218. bitwise_or_int                 $48 |= $49
  219. merge_condition_mask           CondMask = $47 & $48
  220. copy_constant                  $49 = 0
  221. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($49)
  222. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  223. load_condition_mask            CondMask = $47
  224. copy_2_slots_unmasked          $49..50 = i
  225. copy_4_uniforms                $51..54 = testMatrix2x2
  226. matrix_multiply_2              mat2x1($47..48) = mat2x1($49..50) * mat2x2($51..54)
  227. copy_2_slots_masked            v₃ = Mask($47..48)
  228. store_condition_mask           $47 = CondMask
  229. copy_2_slots_unmasked          $48..49 = v₃
  230. copy_constant                  $50 = 0x40400000 (3.0)
  231. copy_constant                  $51 = 0x40E00000 (7.0)
  232. cmpne_2_floats                 $48..49 = notEqual($48..49, $50..51)
  233. bitwise_or_int                 $48 |= $49
  234. merge_condition_mask           CondMask = $47 & $48
  235. copy_constant                  $49 = 0
  236. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($49)
  237. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  238. load_condition_mask            CondMask = $47
  239. copy_4_uniforms                $49..52 = testMatrix2x2
  240. copy_2_slots_unmasked          $53..54 = i
  241. matrix_multiply_2              mat1x2($47..48) = mat2x2($49..52) * mat1x2($53..54)
  242. copy_2_slots_masked            v₃ = Mask($47..48)
  243. store_condition_mask           $47 = CondMask
  244. copy_2_slots_unmasked          $48..49 = v₃
  245. copy_constant                  $50 = 0x40800000 (4.0)
  246. copy_constant                  $51 = 0x40C00000 (6.0)
  247. cmpne_2_floats                 $48..49 = notEqual($48..49, $50..51)
  248. bitwise_or_int                 $48 |= $49
  249. merge_condition_mask           CondMask = $47 & $48
  250. copy_constant                  $49 = 0
  251. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($49)
  252. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  253. load_condition_mask            CondMask = $47
  254. copy_2_slots_unmasked          $49..50 = n
  255. copy_4_uniforms                $51..54 = testMatrix2x2
  256. matrix_multiply_2              mat2x1($47..48) = mat2x1($49..50) * mat2x2($51..54)
  257. copy_2_slots_masked            v₃ = Mask($47..48)
  258. store_condition_mask           $47 = CondMask
  259. copy_2_slots_unmasked          $48..49 = v₃
  260. copy_constant                  $50 = 0xC0400000 (-3.0)
  261. copy_constant                  $51 = 0xC0E00000 (-7.0)
  262. cmpne_2_floats                 $48..49 = notEqual($48..49, $50..51)
  263. bitwise_or_int                 $48 |= $49
  264. merge_condition_mask           CondMask = $47 & $48
  265. copy_constant                  $49 = 0
  266. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($49)
  267. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  268. load_condition_mask            CondMask = $47
  269. copy_4_uniforms                $49..52 = testMatrix2x2
  270. copy_2_slots_unmasked          $53..54 = n
  271. matrix_multiply_2              mat1x2($47..48) = mat2x2($49..52) * mat1x2($53..54)
  272. copy_2_slots_masked            v₃ = Mask($47..48)
  273. copy_constant                  $49 = 0xC0800000 (-4.0)
  274. copy_constant                  $50 = 0xC0C00000 (-6.0)
  275. cmpeq_2_floats                 $47..48 = equal($47..48, $49..50)
  276. bitwise_and_int                $47 &= $48
  277. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($47)
  278. load_return_mask               RetMask = $46
  279. copy_slot_unmasked             $46 = [test_no_op_vec2_X_mat2].result
  280. label                          label 0x00000009
  281. copy_slot_masked               $45 = Mask($46)
  282. label                          label 0x00000003
  283. load_condition_mask            CondMask = $55
  284. copy_constant                  $27 = 0
  285. merge_condition_mask           CondMask = $44 & $45
  286. branch_if_no_lanes_active      branch_if_no_lanes_active +96 (label 2 at #382)
  287. store_return_mask              $28 = RetMask
  288. splat_3_constants              n₁ = 0xBF800000 (-1.0)
  289. splat_3_constants              i₁ = 0x3F800000 (1.0)
  290. splat_4_constants              z₁, v₄(0) = 0
  291. splat_4_constants              v₄(1..2), vv₄(0..1) = 0
  292. copy_constant                  vv₄(2) = 0
  293. splat_3_constants              $29..31 = 0
  294. copy_3_slots_masked            vv₄ = Mask($29..31)
  295. splat_3_constants              $29..31 = 0
  296. copy_3_slots_masked            vv₄ = Mask($29..31)
  297. store_condition_mask           $29 = CondMask
  298. copy_3_slots_unmasked          $30..32 = vv₄
  299. copy_3_slots_unmasked          $33..35 = z₁
  300. cmpne_3_floats                 $30..32 = notEqual($30..32, $33..35)
  301. bitwise_or_int                 $31 |= $32
  302. bitwise_or_int                 $30 |= $31
  303. merge_condition_mask           CondMask = $29 & $30
  304. copy_constant                  $31 = 0
  305. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($31)
  306. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  307. load_condition_mask            CondMask = $29
  308. copy_3_slots_unmasked          $32..34 = i₁
  309. copy_4_uniforms                $35..38 = testMatrix3x3(0..3)
  310. copy_4_uniforms                $39..42 = testMatrix3x3(4..7)
  311. copy_uniform                   $43 = testMatrix3x3(8)
  312. matrix_multiply_3              mat3x1($29..31) = mat3x1($32..34) * mat3x3($35..43)
  313. copy_3_slots_masked            v₄ = Mask($29..31)
  314. store_condition_mask           $29 = CondMask
  315. copy_3_slots_unmasked          $30..32 = v₄
  316. copy_constant                  $33 = 0x40C00000 (6.0)
  317. copy_constant                  $34 = 0x41700000 (15.0)
  318. copy_constant                  $35 = 0x41C00000 (24.0)
  319. cmpne_3_floats                 $30..32 = notEqual($30..32, $33..35)
  320. bitwise_or_int                 $31 |= $32
  321. bitwise_or_int                 $30 |= $31
  322. merge_condition_mask           CondMask = $29 & $30
  323. copy_constant                  $31 = 0
  324. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($31)
  325. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  326. load_condition_mask            CondMask = $29
  327. copy_4_uniforms                $32..35 = testMatrix3x3(0..3)
  328. copy_4_uniforms                $36..39 = testMatrix3x3(4..7)
  329. copy_uniform                   $40 = testMatrix3x3(8)
  330. copy_3_slots_unmasked          $41..43 = i₁
  331. matrix_multiply_3              mat1x3($29..31) = mat3x3($32..40) * mat1x3($41..43)
  332. copy_3_slots_masked            v₄ = Mask($29..31)
  333. store_condition_mask           $29 = CondMask
  334. copy_3_slots_unmasked          $30..32 = v₄
  335. copy_constant                  $33 = 0x41400000 (12.0)
  336. copy_constant                  $34 = 0x41700000 (15.0)
  337. copy_constant                  $35 = 0x41900000 (18.0)
  338. cmpne_3_floats                 $30..32 = notEqual($30..32, $33..35)
  339. bitwise_or_int                 $31 |= $32
  340. bitwise_or_int                 $30 |= $31
  341. merge_condition_mask           CondMask = $29 & $30
  342. copy_constant                  $31 = 0
  343. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($31)
  344. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  345. load_condition_mask            CondMask = $29
  346. copy_3_slots_unmasked          $32..34 = n₁
  347. copy_4_uniforms                $35..38 = testMatrix3x3(0..3)
  348. copy_4_uniforms                $39..42 = testMatrix3x3(4..7)
  349. copy_uniform                   $43 = testMatrix3x3(8)
  350. matrix_multiply_3              mat3x1($29..31) = mat3x1($32..34) * mat3x3($35..43)
  351. copy_3_slots_masked            v₄ = Mask($29..31)
  352. store_condition_mask           $29 = CondMask
  353. copy_3_slots_unmasked          $30..32 = v₄
  354. copy_constant                  $33 = 0xC0C00000 (-6.0)
  355. copy_constant                  $34 = 0xC1700000 (-15.0)
  356. copy_constant                  $35 = 0xC1C00000 (-24.0)
  357. cmpne_3_floats                 $30..32 = notEqual($30..32, $33..35)
  358. bitwise_or_int                 $31 |= $32
  359. bitwise_or_int                 $30 |= $31
  360. merge_condition_mask           CondMask = $29 & $30
  361. copy_constant                  $31 = 0
  362. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($31)
  363. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  364. load_condition_mask            CondMask = $29
  365. copy_4_uniforms                $32..35 = testMatrix3x3(0..3)
  366. copy_4_uniforms                $36..39 = testMatrix3x3(4..7)
  367. copy_uniform                   $40 = testMatrix3x3(8)
  368. copy_3_slots_unmasked          $41..43 = n₁
  369. matrix_multiply_3              mat1x3($29..31) = mat3x3($32..40) * mat1x3($41..43)
  370. copy_3_slots_masked            v₄ = Mask($29..31)
  371. copy_constant                  $32 = 0xC1400000 (-12.0)
  372. copy_constant                  $33 = 0xC1700000 (-15.0)
  373. copy_constant                  $34 = 0xC1900000 (-18.0)
  374. cmpeq_3_floats                 $29..31 = equal($29..31, $32..34)
  375. bitwise_and_int                $30 &= $31
  376. bitwise_and_int                $29 &= $30
  377. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($29)
  378. load_return_mask               RetMask = $28
  379. copy_slot_unmasked             $28 = [test_no_op_vec3_X_mat3].result
  380. label                          label 0x0000000A
  381. copy_slot_masked               $27 = Mask($28)
  382. label                          label 0x00000002
  383. load_condition_mask            CondMask = $44
  384. copy_constant                  $0 = 0
  385. merge_condition_mask           CondMask = $26 & $27
  386. branch_if_no_lanes_active      branch_if_no_lanes_active +102 (label 1 at #488)
  387. store_return_mask              $1 = RetMask
  388. splat_4_constants              n₂ = 0xBF800000 (-1.0)
  389. splat_4_constants              i₂ = 0x3F800000 (1.0)
  390. splat_4_constants              z₂ = 0
  391. copy_4_uniforms                testMatrix4x4(0..3) = testMatrix2x2
  392. copy_4_uniforms                testMatrix4x4(4..7) = testMatrix2x2
  393. copy_4_uniforms                testMatrix4x4(8..11) = testMatrix2x2
  394. copy_4_uniforms                testMatrix4x4(12..15) = testMatrix2x2
  395. splat_4_constants              v₅ = 0
  396. splat_4_constants              vv₅ = 0
  397. splat_4_constants              $2..5 = 0
  398. copy_4_slots_masked            vv₅ = Mask($2..5)
  399. splat_4_constants              $2..5 = 0
  400. copy_4_slots_masked            vv₅ = Mask($2..5)
  401. store_condition_mask           $2 = CondMask
  402. copy_4_slots_unmasked          $3..6 = vv₅
  403. copy_4_slots_unmasked          $7..10 = z₂
  404. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  405. bitwise_or_2_ints              $3..4 |= $5..6
  406. bitwise_or_int                 $3 |= $4
  407. merge_condition_mask           CondMask = $2 & $3
  408. copy_constant                  $4 = 0
  409. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  410. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  411. load_condition_mask            CondMask = $2
  412. copy_4_slots_unmasked          $6..9 = i₂
  413. copy_4_slots_unmasked          $10..13 = testMatrix4x4(0..3)
  414. copy_4_slots_unmasked          $14..17 = testMatrix4x4(4..7)
  415. copy_4_slots_unmasked          $18..21 = testMatrix4x4(8..11)
  416. copy_4_slots_unmasked          $22..25 = testMatrix4x4(12..15)
  417. matrix_multiply_4              mat4x1($2..5) = mat4x1($6..9) * mat4x4($10..25)
  418. copy_4_slots_masked            v₅ = Mask($2..5)
  419. store_condition_mask           $2 = CondMask
  420. copy_4_slots_unmasked          $3..6 = v₅
  421. splat_4_constants              $7..10 = 0x41200000 (10.0)
  422. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  423. bitwise_or_2_ints              $3..4 |= $5..6
  424. bitwise_or_int                 $3 |= $4
  425. merge_condition_mask           CondMask = $2 & $3
  426. copy_constant                  $4 = 0
  427. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  428. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  429. load_condition_mask            CondMask = $2
  430. copy_4_slots_unmasked          $6..9 = testMatrix4x4(0..3)
  431. copy_4_slots_unmasked          $10..13 = testMatrix4x4(4..7)
  432. copy_4_slots_unmasked          $14..17 = testMatrix4x4(8..11)
  433. copy_4_slots_unmasked          $18..21 = testMatrix4x4(12..15)
  434. copy_4_slots_unmasked          $22..25 = i₂
  435. matrix_multiply_4              mat1x4($2..5) = mat4x4($6..21) * mat1x4($22..25)
  436. copy_4_slots_masked            v₅ = Mask($2..5)
  437. store_condition_mask           $2 = CondMask
  438. copy_4_slots_unmasked          $3..6 = v₅
  439. copy_constant                  $7 = 0x40800000 (4.0)
  440. copy_constant                  $8 = 0x41000000 (8.0)
  441. copy_constant                  $9 = 0x41400000 (12.0)
  442. copy_constant                  $10 = 0x41800000 (16.0)
  443. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  444. bitwise_or_2_ints              $3..4 |= $5..6
  445. bitwise_or_int                 $3 |= $4
  446. merge_condition_mask           CondMask = $2 & $3
  447. copy_constant                  $4 = 0
  448. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  449. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  450. load_condition_mask            CondMask = $2
  451. copy_4_slots_unmasked          $6..9 = n₂
  452. copy_4_slots_unmasked          $10..13 = testMatrix4x4(0..3)
  453. copy_4_slots_unmasked          $14..17 = testMatrix4x4(4..7)
  454. copy_4_slots_unmasked          $18..21 = testMatrix4x4(8..11)
  455. copy_4_slots_unmasked          $22..25 = testMatrix4x4(12..15)
  456. matrix_multiply_4              mat4x1($2..5) = mat4x1($6..9) * mat4x4($10..25)
  457. copy_4_slots_masked            v₅ = Mask($2..5)
  458. store_condition_mask           $2 = CondMask
  459. copy_4_slots_unmasked          $3..6 = v₅
  460. splat_4_constants              $7..10 = 0xC1200000 (-10.0)
  461. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  462. bitwise_or_2_ints              $3..4 |= $5..6
  463. bitwise_or_int                 $3 |= $4
  464. merge_condition_mask           CondMask = $2 & $3
  465. copy_constant                  $4 = 0
  466. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  467. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  468. load_condition_mask            CondMask = $2
  469. copy_4_slots_unmasked          $6..9 = testMatrix4x4(0..3)
  470. copy_4_slots_unmasked          $10..13 = testMatrix4x4(4..7)
  471. copy_4_slots_unmasked          $14..17 = testMatrix4x4(8..11)
  472. copy_4_slots_unmasked          $18..21 = testMatrix4x4(12..15)
  473. copy_4_slots_unmasked          $22..25 = n₂
  474. matrix_multiply_4              mat1x4($2..5) = mat4x4($6..21) * mat1x4($22..25)
  475. copy_4_slots_masked            v₅ = Mask($2..5)
  476. copy_constant                  $6 = 0xC0800000 (-4.0)
  477. copy_constant                  $7 = 0xC1000000 (-8.0)
  478. copy_constant                  $8 = 0xC1400000 (-12.0)
  479. copy_constant                  $9 = 0xC1800000 (-16.0)
  480. cmpeq_4_floats                 $2..5 = equal($2..5, $6..9)
  481. bitwise_and_2_ints             $2..3 &= $4..5
  482. bitwise_and_int                $2 &= $3
  483. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($2)
  484. load_return_mask               RetMask = $1
  485. copy_slot_unmasked             $1 = [test_no_op_vec4_X_mat4].result
  486. label                          label 0x0000000B
  487. copy_slot_masked               $0 = Mask($1)
  488. label                          label 0x00000001
  489. load_condition_mask            CondMask = $26
  490. swizzle_4                      $0..3 = ($0..3).xxxx
  491. copy_4_uniforms                $4..7 = colorRed
  492. copy_4_uniforms                $8..11 = colorGreen
  493. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  494. load_src                       src.rgba = $0..3
