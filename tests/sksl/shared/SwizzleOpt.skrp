    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_4_constants               $0..3 = testInputs
    4. copy_4_slots_unmasked          v = $0..3
    5. zero_slot_unmasked             $0 = 0
    6. copy_4_slots_unmasked          $1..4 = v
    7. swizzle_3                      $1..3 = ($1..3).zyx
    8. copy_4_slots_masked            v = Mask($0..3)
    9. zero_slot_unmasked             $0 = 0
   10. zero_slot_unmasked             $1 = 0
   11. copy_4_slots_unmasked          $2..5 = v
   12. swizzle_1                      $3 = ($3..5).z
   13. copy_4_slots_masked            v = Mask($0..3)
   14. copy_constant                  $0 = 0x3F800000 (1.0)
   15. copy_constant                  $1 = 0x3F800000 (1.0)
   16. copy_4_slots_unmasked          $2..5 = v
   17. swizzle_2                      $2..3 = ($2..5).wx
   18. copy_4_slots_masked            v = Mask($0..3)
   19. swizzle_2                      $0..1 = ($0..2).zy
   20. copy_constant                  $2 = 0x3F800000 (1.0)
   21. copy_constant                  $3 = 0x3F800000 (1.0)
   22. copy_4_slots_masked            v = Mask($0..3)
   23. swizzle_2                      $0..1 = ($0..1).xx
   24. copy_constant                  $2 = 0x3F800000 (1.0)
   25. copy_constant                  $3 = 0x3F800000 (1.0)
   26. copy_4_slots_masked            v = Mask($0..3)
   27. swizzle_4                      $0..3 = ($0..3).wzwz
   28. copy_4_slots_masked            v = Mask($0..3)
   29. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#54)
   30. store_return_mask              $0 = RetMask
   31. copy_4_slots_unmasked          $1..4 = v
   32. copy_4_slots_unmasked          v = $1..4
   33. copy_constant                  x = 0x00000001 (1.401298e-45)
   34. store_loop_mask                $1 = LoopMask
   35. jump                           jump +10 (#45)
   36. zero_slot_unmasked             [for-loop continue mask 0] = 0
   37. copy_slot_unmasked             $2 = v(0)
   38. copy_slot_masked               [fn].result = Mask($2)
   39. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   40. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   41. copy_slot_unmasked             $2 = x
   42. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   43. add_int                        $2 += $3
   44. copy_slot_masked               x = Mask($2)
   45. copy_slot_unmasked             $2 = x
   46. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   47. cmple_int                      $2 = lessThanEqual($2, $3)
   48. merge_loop_mask                LoopMask &= $2
   49. stack_rewind
   50. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#36)
   51. load_loop_mask                 LoopMask = $1
   52. load_return_mask               RetMask = $0
   53. copy_slot_unmasked             $0 = [fn].result
   54. copy_constant                  $1 = 0x42F60000 (123.0)
   55. copy_constant                  $2 = 0x43E40000 (456.0)
   56. swizzle_4                      $0..3 = ($0..3).yyzz
   57. copy_4_slots_masked            v = Mask($0..3)
   58. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#83)
   59. store_return_mask              $0 = RetMask
   60. copy_4_slots_unmasked          $1..4 = v
   61. copy_4_slots_unmasked          v = $1..4
   62. copy_constant                  x = 0x00000001 (1.401298e-45)
   63. store_loop_mask                $1 = LoopMask
   64. jump                           jump +10 (#74)
   65. zero_slot_unmasked             [for-loop continue mask 1] = 0
   66. copy_slot_unmasked             $2 = v(0)
   67. copy_slot_masked               [fn].result = Mask($2)
   68. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   69. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   70. copy_slot_unmasked             $2 = x
   71. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   72. add_int                        $2 += $3
   73. copy_slot_masked               x = Mask($2)
   74. copy_slot_unmasked             $2 = x
   75. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   76. cmple_int                      $2 = lessThanEqual($2, $3)
   77. merge_loop_mask                LoopMask &= $2
   78. stack_rewind
   79. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#65)
   80. load_loop_mask                 LoopMask = $1
   81. load_return_mask               RetMask = $0
   82. copy_slot_unmasked             $0 = [fn].result
   83. copy_constant                  $1 = 0x42F60000 (123.0)
   84. copy_constant                  $2 = 0x43E40000 (456.0)
   85. swizzle_4                      $0..3 = ($0..3).yyzz
   86. copy_4_slots_masked            v = Mask($0..3)
   87. copy_constant                  $0 = 0x42F60000 (123.0)
   88. copy_constant                  $1 = 0x43E40000 (456.0)
   89. copy_constant                  $2 = 0x43E40000 (456.0)
   90. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#115)
   91. store_return_mask              $3 = RetMask
   92. copy_4_slots_unmasked          $4..7 = v
   93. copy_4_slots_unmasked          v = $4..7
   94. copy_constant                  x = 0x00000001 (1.401298e-45)
   95. store_loop_mask                $4 = LoopMask
   96. jump                           jump +10 (#106)
   97. zero_slot_unmasked             [for-loop continue mask 2] = 0
   98. copy_slot_unmasked             $5 = v(0)
   99. copy_slot_masked               [fn].result = Mask($5)
  100. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  101. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  102. copy_slot_unmasked             $5 = x
  103. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  104. add_int                        $5 += $6
  105. copy_slot_masked               x = Mask($5)
  106. copy_slot_unmasked             $5 = x
  107. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  108. cmple_int                      $5 = lessThanEqual($5, $6)
  109. merge_loop_mask                LoopMask &= $5
  110. stack_rewind
  111. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#97)
  112. load_loop_mask                 LoopMask = $4
  113. load_return_mask               RetMask = $3
  114. copy_slot_unmasked             $3 = [fn].result
  115. copy_4_slots_masked            v = Mask($0..3)
  116. copy_constant                  $0 = 0x42F60000 (123.0)
  117. copy_constant                  $1 = 0x43E40000 (456.0)
  118. copy_constant                  $2 = 0x43E40000 (456.0)
  119. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#144)
  120. store_return_mask              $3 = RetMask
  121. copy_4_slots_unmasked          $4..7 = v
  122. copy_4_slots_unmasked          v = $4..7
  123. copy_constant                  x = 0x00000001 (1.401298e-45)
  124. store_loop_mask                $4 = LoopMask
  125. jump                           jump +10 (#135)
  126. zero_slot_unmasked             [for-loop continue mask 3] = 0
  127. copy_slot_unmasked             $5 = v(0)
  128. copy_slot_masked               [fn].result = Mask($5)
  129. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  130. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  131. copy_slot_unmasked             $5 = x
  132. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  133. add_int                        $5 += $6
  134. copy_slot_masked               x = Mask($5)
  135. copy_slot_unmasked             $5 = x
  136. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  137. cmple_int                      $5 = lessThanEqual($5, $6)
  138. merge_loop_mask                LoopMask &= $5
  139. stack_rewind
  140. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#126)
  141. load_loop_mask                 LoopMask = $4
  142. load_return_mask               RetMask = $3
  143. copy_slot_unmasked             $3 = [fn].result
  144. copy_4_slots_masked            v = Mask($0..3)
  145. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#170)
  146. store_return_mask              $0 = RetMask
  147. copy_4_slots_unmasked          $1..4 = v
  148. copy_4_slots_unmasked          v = $1..4
  149. copy_constant                  x = 0x00000001 (1.401298e-45)
  150. store_loop_mask                $1 = LoopMask
  151. jump                           jump +10 (#161)
  152. zero_slot_unmasked             [for-loop continue mask 4] = 0
  153. copy_slot_unmasked             $2 = v(0)
  154. copy_slot_masked               [fn].result = Mask($2)
  155. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  156. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  157. copy_slot_unmasked             $2 = x
  158. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  159. add_int                        $2 += $3
  160. copy_slot_masked               x = Mask($2)
  161. copy_slot_unmasked             $2 = x
  162. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  163. cmple_int                      $2 = lessThanEqual($2, $3)
  164. merge_loop_mask                LoopMask &= $2
  165. stack_rewind
  166. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#152)
  167. load_loop_mask                 LoopMask = $1
  168. load_return_mask               RetMask = $0
  169. copy_slot_unmasked             $0 = [fn].result
  170. copy_constant                  $1 = 0x42F60000 (123.0)
  171. copy_constant                  $2 = 0x43E40000 (456.0)
  172. swizzle_4                      $0..3 = ($0..3).yxxz
  173. copy_4_slots_masked            v = Mask($0..3)
  174. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#199)
  175. store_return_mask              $0 = RetMask
  176. copy_4_slots_unmasked          $1..4 = v
  177. copy_4_slots_unmasked          v = $1..4
  178. copy_constant                  x = 0x00000001 (1.401298e-45)
  179. store_loop_mask                $1 = LoopMask
  180. jump                           jump +10 (#190)
  181. zero_slot_unmasked             [for-loop continue mask 5] = 0
  182. copy_slot_unmasked             $2 = v(0)
  183. copy_slot_masked               [fn].result = Mask($2)
  184. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  185. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  186. copy_slot_unmasked             $2 = x
  187. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  188. add_int                        $2 += $3
  189. copy_slot_masked               x = Mask($2)
  190. copy_slot_unmasked             $2 = x
  191. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  192. cmple_int                      $2 = lessThanEqual($2, $3)
  193. merge_loop_mask                LoopMask &= $2
  194. stack_rewind
  195. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#181)
  196. load_loop_mask                 LoopMask = $1
  197. load_return_mask               RetMask = $0
  198. copy_slot_unmasked             $0 = [fn].result
  199. copy_constant                  $1 = 0x42F60000 (123.0)
  200. copy_constant                  $2 = 0x43E40000 (456.0)
  201. swizzle_4                      $0..3 = ($0..3).yxxz
  202. copy_4_slots_masked            v = Mask($0..3)
  203. copy_constant                  $0 = 0x3F800000 (1.0)
  204. copy_constant                  $1 = 0x3F800000 (1.0)
  205. copy_constant                  $2 = 0x40000000 (2.0)
  206. copy_constant                  $3 = 0x40400000 (3.0)
  207. copy_4_slots_masked            v = Mask($0..3)
  208. copy_3_constants               $0..2 = colorRed(0..2)
  209. copy_constant                  $3 = 0x3F800000 (1.0)
  210. copy_4_slots_masked            v = Mask($0..3)
  211. copy_constant                  $0 = colorRed(0)
  212. copy_constant                  $1 = 0x3F800000 (1.0)
  213. copy_2_constants               $2..3 = colorRed(1..2)
  214. copy_4_slots_masked            v = Mask($0..3)
  215. copy_slot_masked               v(3) = Mask($0)
  216. copy_slot_masked               v(2) = Mask($1)
  217. copy_slot_masked               v(1) = Mask($2)
  218. copy_slot_masked               v(0) = Mask($3)
  219. copy_2_slots_unmasked          $0..1 = v(1..2)
  220. copy_slot_masked               v(0) = Mask($0)
  221. copy_slot_masked               v(3) = Mask($1)
  222. copy_4_slots_unmasked          $0..3 = v
  223. swizzle_2                      $0..1 = ($0..3).ww
  224. copy_constant                  $2 = 0x3F800000 (1.0)
  225. copy_slot_masked               v(2) = Mask($0)
  226. copy_slot_masked               v(1) = Mask($1)
  227. copy_slot_masked               v(0) = Mask($2)
  228. store_condition_mask           $8 = CondMask
  229. copy_4_slots_unmasked          $9..12 = v
  230. copy_constant                  $13 = 0x3F800000 (1.0)
  231. swizzle_4                      $13..16 = ($13..16).xxxx
  232. cmpeq_4_floats                 $9..12 = equal($9..12, $13..16)
  233. bitwise_and_2_ints             $9..10 &= $11..12
  234. bitwise_and_int                $9 &= $10
  235. copy_4_constants               $0..3 = colorRed
  236. merge_condition_mask           CondMask = $8 & $9
  237. copy_4_constants               $4..7 = colorGreen
  238. copy_4_slots_masked            $0..3 = Mask($4..7)
  239. load_condition_mask            CondMask = $8
  240. copy_4_slots_masked            [main].result = Mask($0..3)
  241. load_src                       src.rgba = [main].result
